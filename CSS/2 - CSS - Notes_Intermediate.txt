CSS
  > Intermediate
	- Css Selectors
		Basic selectors : 
			element	- Matches an element.	p { color: red } - matches paragraphs
			.class	- Matches the value of a class attribute.	.warning { color: red } matches elements containing class="warning" 
			#id	- Matches the value of an id attribute.	#warning { color: red } - matches elements containing id="warning" 
			*	- Matches everything.	* { color: red } 
		Attribute selectors : 
			[attribute]	Matches elements containing a given attribute.	a[href] { color: red } 
            [attribute="x"]	    - given attribute with a given value.	a[href="/sitemap/"] { color: red }
            [attribute~="x"]	- given attribute with a value that contains a sub-value within a space-separated list.	abbr[title~="Style"] { color: red }
            [attribute^="x"]	- given attribute with a value that starts with something.	a[href^="http://"] { color: red }
            [attribute|="x"]	- given attribute with a value that contains a sub-value within a hyphen-separated list.	html[lang|="en"] { color: red }
            [attribute$="x"]	- given attribute with a value that ends with something.	a[href$=".com"] { color: red }
            [attribute*="x"]	- given attribute with a value that contains something.	a[href*="htmldog"] { color: red }
        Psudeo classes : 
            :link - a link that has not been visited.	a:link { color: blue }
            :visited - a link thas has been visited.	a:visited { color: purple }
            :active - element that is being activated, such as a link being clicked on.	a:active { color: red }
            :hover - element whose box is being hovered over by a cursor.	a:hover { text-decoration: none }
            :focus - element that has focus, such as one that has been tabbed to.	a:focus { border: 1px solid yellow }
            :target - element that has been linked to (via <a href="#x"…, for example).	h2:target { color: red }
            :lang() - element of a given language.	p:lang(fr) { color: red }
            :first-child - first child of an element.	p:first-child { color: red }
            :last-child - the last child of an element.	div p:last-child { color: blue }
            :first-of-type - first sibling of its type in an element.	li:first-of-type { color: red }
            :last-of-type - the last sibling of its type in an element.	li:last-of-type { color: blue }
            :nth-child() - element that is the ordinal number child of its parent.	p:nth-child(3) { color: red }
            :nth-last-child() - element that is the ordinal number child, in reverse order, of its parent.	p:nth-last-child(2) { color: blue }
            :nth-of-type() - element that is the ordinal number sibling of its type.	li:nth-of-type(5) { color: red }
            :nth-last-of-type() - element that is the ordinal number sibling, in reverse order, of its type.	li:nth-of-type(5) { color: red }
            :only-child	- element if it is the only child of its parent.	article p:only-child { color: red }
            :only-of-type - element if it is the only sibling of its type.	article aside:only-of-type { color: blue }
            :empty - element with no children, or content.	td:empty { border-color: red }
            :root - root element of a document. This will be the html element in HTML.	:root { background: yellow }
            :enabled - form control elements that are not disabled.	input:enabled { border-color: lime }
            :disabled - form control elements that are disabled.	input:enabled { border-color: red }
            :checked - a radio or checkbox type input element that is checked.	input:checked { outline: 3px solid yellow }
            :not() - Negotiation pseudo-class. Matches an element that does not match a selector.	p:not(:first-child) { color: orange }
        Psuedo Elements : 
            ::first-line - first textual line in an element.	p::first-line { font-weight: bold }
            ::first-letter - first letter in an element.	p::first-letter { font-size: 2em }
            ::before - used with the content property to generate content before the initial content of an element.	h1::before { content: "*" }
            ::after	 - Used with the content property to generate content after the initial content of an element.	h1::after { content: "+" }
        Combinators : 
            selector selector	Descendant combinator - elements that are descendants of another element.	aside p { color: red }
            selector > selector	Child combinator - elements that are children of another element.	.warning > p { color: red }
            selector + selector	Adjacent sibling combinator - elements that immediately follow another element.	h1 + * { color: red }
            selector ~ selector	General sibling combinator - elements that follow another element.	h2 ~ p { color: red }

    - Grouping and nesting : simplfy the code and easier to manage
        Grouping : give the same properties to a number of selectors without having to repeat them.
            h2, .thisOtherClass, .yetAnotherClass { color: red; }
        Nesting : can specify properties to selectors within other selectors.
            //html
            <div id="top">
                <h1>Chocolate curry</h1>
                <p>This is my recipe for making curry purely with chocolate</p>
                <p>Mmm mm mmmmm</p>
            </div>
            //css
            #top { background-color: #ccc; padding: 1em}
            #top h1 { color: #ff0; }
            #top p { color: red; font-weight: bold; }
    
    - background images : are a powerful way to add detailed presentation to a page.
        background-color, already learned
        background-image, which is the location of the image itself.    
        background-repeat 
            repeat, the equivalent of a “tile” effect across the whole background
            repeat-y, repeating on the y-axis, above and below
            repeat-x repeating on the x-axis, side-by-side
            no-repeat which shows just one instance of the image
        background-position : (top, center, bottom, left, right, a length, or a percentage, or any sensible combination, such as top right)
    
    - Specificity :  two (or more) conflicting CSS rules that point to the same element, 
        there are some basic rules that a browser follows to determine which one is most specific and therefore wins out. 
        More Specific : below p within a div would be colored blue, seeing as a rule to color p boxes blue comes last, 
            but they would actually be colored red due to the specificity of the first selector
            div p { color: red } // this will apply
            p { color: blue }
        Greater Precedence : If the selectors are the same then the last one will always take precedence.
            p { color: red }
            p { color: blue } // this will apply
        Calculating Specificity : ID selector - 100, class selector - 10 and HTML selector - 1. 
            div p  - 2 (2 HTML selectors, 1+1)
            div p.tree - 12 (2 HTML selectors + a class selector, 1+1+10)
            body #content .alternative p - 112 (HTML selector + id selector + class selector + HTML selector, 1+100+10+1)

    - Display : The most fundamental types of display are inline, block and none and they can be manipulated with the display property
        none : No display at all — pulls a box out of the flow of a layout and renders it invisible. Poof. As if it never existed.
        inline : An inline box — behaves like the default styling of inline HTMl elements such as em or span.
        block : A block box — behaves like the default styling of block HTMl elements such as p or div.
        inline-block : Acts as an inline box (fits into the flow of a line of text) with certain features of a block box (accepts vertical dimensions and margings, etc.).
        list-item : The equivalent of the default styling of the HTML li element.
        table : A block-level table — the equivalent of the default styling of the HTML table element.
        inline-table : An inline-level table.
        table-row-group	: The equivalent of the default styling of the HTML tbody element.
        table-header-group : The equivalent of the default styling of the HTML thead element.
        table-footer-group : The equivalent of the default styling of the HTML tfoot element.
        table-row : The equivalent of the default styling of the HTML tr element.
        table-column-group : The equivalent of the default styling of the HTML colgroup element.
        table-column : The equivalent of the default styling of the HTML col element.
        table-cell : The equivalent of the default styling of the HTML td or th elements.
        table-caption : The equivalent of the default styling of the HTML caption element.
        inherit
        initial
        unset

    - Visility : The visibility, or invisibility, of a box.
        visible	Default.
        hidden	Invisible. unlike display: none it size and shape will still affect layout.
        collapse Various table row and column hiding shenanigans.
        inherit
        initial
        unset
    
    - Page Layout : In the olden days, pre-hominid apes used HTML tables to layout web pages
        Positioning : The position property is used to define whether a box is absolute, relative, static or fixed
            static : renders a box in the normal order of things, as they appear in the HTML.
            relative : box can be offset from its original position with the properties top, right, bottom and left.
            absolute : box can be placed anywhere on the page using top, right, bottom and left.
            fixed : fixed boxes should stay exactly where they are on the screen even when the page is scrolled. 
        Floating : box will shift it to the right or left of a line, with surrounding content flowing around it. 
            float: left or float: right.
        Clear : How a box following a floated box should behave.
            none	Floated boxes are not cleared — content will flow around them. Default.
            left	Left-floated boxes are cleared. Box is placed underneath.
            right	Right-floated boxes are cleared. Box is placed underneath.
            both	All floated boxes are cleared. Box is placed underneath.